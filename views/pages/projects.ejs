<!DOCTYPE html>
<html lang="en">

<head>
  <title>
    <%= title %>
  </title>
  <%- include('../partials/head'); %>
</head>

<body class="container">

  <header>
    <%- include('../partials/header'); %>
  </header>

  <main>
    <div class="jumbotron">
      <h1>Projects</h1>
      <div class="container">
        <article class="blog-post">
          <h2 class="blog-post-title">Approval App</h2>
          <p class="blog-post-meta">Android Hybrid App</p>
          <p>
            <a
              href="https://www.google.com/url?q=https://play.google.com/store/apps/details?id%3Dcom.gammon.approvalsystemapp&amp;sa=D&amp;source=editors&amp;ust=1643852555270140&amp;usg=AOvVaw1fr9ZLQJqluuwSrIPK4bYT">https://play.google.com/store/apps/details?id=com.gammon.approvalsystemapp</a>
          </p>
          <br />
          <p><img alt="" src="images/image2.png"
              style="width: 160.50px; height: 160.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title="" /></p>
          <p>Company: Gammon Construction</p>
          <p>Role: Mobile App Team developer</p>
          <p>Native Android part handles user authentication &amp; auth-cookies (rememberMe
            cookie), basic security (passcode page), and GCM (Google cloud messaging)</p>
          <p>The main content is implemented in the WebView component, from a web hosted in
            the
            company&#39;s weblogic server. </p>
          <p>The webapp was developed using Angular.js (version 1) with responsive design.

          </p>
          <h3>Problem/ Pain Point</h3>
          <p>Company did not have a responsive web UI for approval e.g. leave,
            reimbursement,
            expense etc. Users (approvers) need to use PCs to review and approve. </p>
          <p>Before the approval app, users will receive several systems&rsquo; emails to do
            their
            approvals. </p>
          <br />
          <h3>Solution</h3>
          <p>Developed a new client side app with responsive web design, using Angular.js
            and
            bootstrap css. </p>
          <p>Also, a mobile hybrid mobile app to suit the use case of mobile
            devices</p>
          <p>Implemented Restful APIs using Spring and Hibernate, tracking the mail server for approval
            emails</p>
          <br />
          <p>(With a diagram describe different approval emails grouped and display in
            approval
            app)</p>
          <br />
          <h3>My responsiblility</h3>
          <p>Frontend framework R&amp;D (React js and Angular js)</p>
          <p>Android Hybrid Mobile App PoC (Authentication, WebView &amp; GCM)<br>UX/UI
            Design
            (Material UI)</p>
          <p>Graddle script (Package management &amp; auto version increment
            script)</p>
          <p>Mobile
            Authentication</p>
          <p>Restful API Implementation </p>
          <p>Frontend Implementation (Hybrid Mobile app Android &amp; Angular Webapp)
          </p>
          <p>User Support </p>
          <p>Testing &amp; Documentation </p>
          <br />
          <hr style="page-break-before:always;display:none;">
          <br />
        </article>
        <article class="blog-post">
          <h2 class="blog-post-title">Labour Allocation App</h2>
          <img alt="" src="images/image4.png"
            style="width: 189.83px; height: 189.83px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
            title="" />

          <br />
          <p>Under the cost saving scheme in 2015, management would like to take control
            more on
            site resource optimization. Therefore, this app was born.</p>
          <br />
          <p>This app digitized the site diary and timesheet, recorded labour work hours and
            tasks
            every day.<br><br>With reference to the approval app, the architecture was more or less the same.
            <br>Using
            native Android to handle authentication, cookies, GCM; <br>Webview to show the responsive design webapp
            written in Angular js;
          </p>
          <p>Restful API using Spring and Hibernate<br><br></p>
          <hr style="page-break-before:always;display:none;">

        </article>
        <article class="blog-post">
          <h2 class="blog-post-title">Gammon Attendance App</h2>
          <p><img alt="" src="images/image7.png"
              style="width: 171.50px; height: 171.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title=""><img alt="" src="images/image1.png"
              style="width: 218.89px; height: 389.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title=""></p>
          <br />
          <p>Foundation worker attendance</p>
          <p>Native Android App</p>
          <p>NFC Reader to read worker card</p>
          <p>For Payroll reference</p>
        </article>
        <article class="blog-post">
          <h2 class="blog-post-title">Concrete App </h2>
          <p><img alt="" src="images/image6.png"
              style="width: 212.50px; height: 212.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title=""></p>
          <p>Barcode Scanning app to confirm the received concrete and its details. Used by site admin. </p>
          <p>By scanning the barcode on the concrete document printed from the concrete factory, site
            admin would be easy to confirm that the delivered concrete is what they want.</p>
          <p>R&amp;D Ionic, Cordova, React Native</p>
        </article>
        <article class="blog-post">
          <h2 class="blog-post-title">Concrete Delivery App</h2>
          <br />
          <p><img alt="" src="images/image3.png"
              style="width: 235.50px; height: 235.50px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title=""></p>
          <br />
          <p>Ionic Project</p>
          <p>Used by Cement truck drivers.</p>
          <p>Keep track on different statuses (Transporting, Delivered, Confirmed by site
            admin
            etc)</p>
          <p>R&amp;D Ionic, Cordova, React Native</p>
          <br />
        </article>
        <article class="blog-post">
          <h2 class="blog-post-title">AWS Cloud</h2>
          <p>SES email bounce handler Lambda function with CI/CD</p>
          <h3>Problem</h3>
          <p>As email bounce has been a serious issue after migrating to AWS SES from the exchange server, IT needed to
            control the bounce rate within 5%.</p>
          <p>INF team lack of developers.</p>
          <p>Lambda functions without built-in CI/CD tools.</p>
          <h3>Solution</h3>
          <p>Construct a Lambda function to catch bounced emails, and stored as a blacklist.</p>
          <p>Open an API for company email sending apps to query and verify whether the list of recipients contain
            blacklisted emails or not. </p>
          <p>A CI/CD tool using cloudformation, codepipeline and configuring the app by yaml
            file.
          </p>
          <h3>Next Step</h3>
          <p>Codepipeline can be exported as a yaml file and use cloudformation to deploy for another apps/ functions.
          </p>
          <p>Multiple environments (dev, preprod, prod) using codeDeploy. </p>
          <br />
          <h3>Detail Flow</h3>
          <p><img alt="" src="images/image8.png"
              style="width: 601.70px; height: 476.00px; margin-left: 0.00px; margin-top: 0.00px; transform: rotate(0.00rad) translateZ(0px); -webkit-transform: rotate(0.00rad) translateZ(0px);"
              title=""></p>
          <p>Project duration: 6 months </p>
          <p>Main parties: internal app teams, INF team</p>
          <p>Communication channel: teams, meeting</p>
        </article>
      </div>
    </div>
  </main>

  <footer>
    <%- include('../partials/footer'); %>
  </footer>

</body>

</html>